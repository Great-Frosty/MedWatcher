Задача: 

Телеграм бот, который следит за некоторыми интернет ресурсами и уведомляет
о появлении на них статей с заданными пользователем ключевыми словами.
(На мониторинг вручную нескольких научных журналов уходит много времени)

1. пишем несколько парсеров, по количеству ресурсов
2. каждый парсер просыпается пару раз в день и проверяет выход новых статей
3. новая статья складывается в список статей внутри парсера, в виде множества
уникальных слов в статье (наверное есть резон погуглить токенизацию и т.п.)
4. пользователь может осуществить поиск по уже лежащим статьям, задав ключевые слова,
бот должен вернуть список статей.
5. пользователь может "подписаться" на указанные парсеры по указанным ключевым словам,
при выходе новой статьи с встречающимся в ней ключевым словом, пользователь
получает ссылку на эту статью. 
5.1. уникальный пользователь, который хочет "подписаться" добавляется в словарь,
в котором ключ - user_id, а значения - его ключевые слова.
5.2. при появлении новой статьи в ней проверяются на наличие все ключевые слова
по всем значениям в словаре, при совпадении нужный пользователь (ключ)
получает уведомление.

итого примерно имеем:

    - parsers.py
        - класс_парсер_ресурса_а
            - класс_статья_а
            - класс_статья_b
        - класс_парсер_ресурса_b
        - ...
    """Парсеру нужен метод check_updates, который возвращает экземпляры класса
    Статья. Статья хранит в себе все нужные для формирования выдачи метаданные,
    токенизированный текст. Возможно понадобится отдельный метод поиска по статье,
    если хватит времени на какой-то алгоритм поиска отличный от if X in Y"""

    - users.csv
        user_id_0 : keyword_0, keyword_1,
        user_id_1 : ...

    - bot.py
    """Будит парсеры по расписанию, принимает запросы от пользователей,
    проверяет все новые статьи во всех парсерах на ключевые слова,
    рассылает совпавшие статьи при наличии обновлений"""

предусмотреть:
    - механизм защиты от повторений (мб вести по каждому юзеру лог выдачи?)
    - механизм сортировки результата поиска (цитируемость, дата, и т.п.)
    - механизм обработки запроса (хэндлить незнакомые команды и т.п.)
    - механизм хелпа (управление ботом, текущие "подписки" и т.п.)
    - удобное оформление выдачи (наверное instant view или типа того)